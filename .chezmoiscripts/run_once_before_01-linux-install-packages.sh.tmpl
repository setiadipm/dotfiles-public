{{- if eq .chezmoi.os "linux" -}}
#!/bin/bash

log_color() {
  color_code="$1"
  shift

  printf "\033[${color_code}m%s\033[0m\n" "$*" >&2
}

log_red() {
  log_color "0;91" "$@"
}

log_blue() {
  log_color "0;96" "$@"
}

log_task() {
  log_blue "üîÉ" "$@"
}

log_error() {
  log_red "‚ùå" "$@"
}

error() {
  log_error "$@"
  exit 1
}

printf "\n"
log_blue "# Installing packages... #"

# For installing debian packages when needed
# debian_packages="unzip fd-find"
# log_task "Installing $debian_packages"
# sudo apt install -y $debian_packages

printf "\n"
log_task "Adding php repository"
sudo add-apt-repository ppa:ondrej/php -y

printf "\n"
log_task "Installing php5.6"
sudo apt install -y php5.6 php5.6-mbstring php5.6-zip php5.6-mysql php5.6-xml php5.6-intl php5.6-cli php5.6-gd php5.6-curl php5.6-sqlite3

printf "\n"
log_task "Installing php7.4"
sudo apt install -y php7.4 php7.4-mbstring php7.4-zip php7.4-mysql php7.4-xml php7.4-intl php7.4-cli php7.4-gd php7.4-curl php7.4-sqlite3

printf "\n"
log_task "Installing php8.2"
sudo apt install -y php8.2 php8.2-mbstring php8.2-zip php8.2-mysql php8.2-xml php8.2-intl php8.2-cli php8.2-gd php8.2-curl php8.2-sqlite3

printf "\n"
log_task "Installing composer"
curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer

printf "\n"
log_task "Installing apache2"
sudo apt install -y apache2
sudo a2enmod rewrite

sudo mkdir -p ~/.local/bin
brew_packages=(
  "eza"
  "fd"
  "fnm"
  "go"
  "jandedobbeleer/oh-my-posh/oh-my-posh"
  "lazygit"
  "neovim"
  "ripgrep"
  "unzip"
  "z"
)
for package in "${brew_packages[@]}"; do
  printf "\n"
  log_task "Installing $package"
  brew install "$package"
done

printf "\n"
log_task "Installing latest LTS npm as default"
fnm install --lts
fnm_versions=(
  "v10.24.1"
  "v14.21.3"
  "v16.20.2"
)
for version in "${fnm_versions[@]}"; do
  printf "\n"
  log_task "Installing npm $version"
  fnm install $version
done

go_packages=(
  "gofumpt mvdan.cc/gofumpt@latest"
  "goimports-reviser github.com/incu6us/goimports-reviser/v3@latest"
  "golangci-lint github.com/golangci/golangci-lint/cmd/golangci-lint@v1.54.2"
  "air-live-reloading github.com/cosmtrek/air@latest"
)
for package_info in "${go_packages[@]}"; do
  package_name="${package_info%% *}"
  package_path="${package_info#* }"
  printf "\n"
  log_task "Installing $package_name"
  go install "$package_path"
done

printf "\n"
log_blue "# Creating working directories... #"
working_dirs=(
  "$HOME/go/src"
  "$HOME/angular"
  "$HOME/flutter"
  "$HOME/docker"
  "/var/www"
)
for dir in "${working_dirs[@]}"; do
  printf "\n"
  log_task "Creating $dir"
  sudo mkdir -p $dir
  sudo chown -R 1000:1000 $dir
done

printf "\n"
{{- end -}}
